name: GitHub Release

on:
  push:
    # branches:
    #   - main

jobs:
  latest_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get latest release version
        id: latest_release
        uses: "actions/github-script@v6"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data } = await github.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            return data.tag_name

  increment_version:
    runs-on: ubuntu-latest
    needs: latest_release

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Increment version
        id: increment_version
        run: |
          echo "Current version: ${{ steps.latest_release.outputs.latest_release }}"
          # Extract the major, minor, and patch versions
          IFS='.' read -ra VERSION <<< "${{ steps.latest_release.outputs.latest_release }}"
          MAJOR=${VERSION[0]}
          MINOR=${VERSION[1]}
          PATCH=${VERSION[2]}
          # Increment the patch version
          PATCH=$((PATCH+1))
          # Set the new version number
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
        shell: bash

  create_release:
    runs-on: ubuntu-latest
    needs: increment_version
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create GitHub Release
        id: create_release
        uses: "actions/create-release@v1"
        with:
           tag_name: ${{ steps.increment_version.outputs.NEW_VERSION }}
           release_name: Release ${{ steps.increment_version.outputs.NEW_VERSION }}
           body: Release ${{ steps.increment_version.outputs.NEW_VERSION }}
           draft: false
           prerelease: false
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
